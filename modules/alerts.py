import json
import os

ALERTS_PATH = "data/user_alerts.json"
if not os.path.exists("data"):
    os.mkdir("data")

def load_user_alerts():
    if os.path.exists(ALERTS_PATH):
        with open(ALERTS_PATH, "r") as f:
            return {int(k): set(v) for k, v in json.load(f).items()}
    return {}

def save_user_alerts():
    with open(ALERTS_PATH, "w") as f:
        json.dump({str(k): list(v) for k, v in user_alerts.items()}, f)

user_alerts = load_user_alerts()   # —Ç–æ–ª—å–∫–æ —ç—Ç–∞ —Å—Ç—Ä–æ–∫–∞! –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π user_alerts = {} –Ω–∏–∂–µ

from modules import avito  # –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ –ê–≤–∏—Ç–æ
from modules import rent   # —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å user_filters
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio

router = Router()
bot = None  # —Å—é–¥–∞ –≤ main.py –ø–æ–¥–∫–∏–Ω–µ—à—å –æ–±—ä–µ–∫—Ç Bot
ALERT_TOPICS = ["–ê—Ä–µ–Ω–¥–∞", "–ö—É—Ä—Å—ã", "–ö—Ä–∏–ø—Ç–∞"]

@router.message(Command("alerts"))
async def alerts_menu(message: types.Message):
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=topic)] for topic in ALERT_TOPICS],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–ª–µ—Ä—Ç—ã:", reply_markup=kb)

@router.message(F.text.in_(ALERT_TOPICS))
async def subscribe_alert(message: types.Message):
    user_id = message.from_user.id
    topic = message.text
    if user_id not in user_alerts:
        user_alerts[user_id] = set()
    user_alerts[user_id].add(topic)
    save_user_alerts()   # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è!
    await message.answer(f"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞–ª–µ—Ä—Ç—ã –ø–æ —Ç–µ–º–µ: {topic}!\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ.", reply_markup=types.ReplyKeyboardRemove())

async def rent_alerts_main():
    print(f"user_alerts: {user_alerts}")
    print(f"user_filters: {rent.user_filters}")
    topic = "–ê—Ä–µ–Ω–¥–∞"
    for user_id, topics in user_alerts.items():
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º user_id: {user_id}, —Ç–µ–º—ã: {topics}")
        if topic in topics:
            user_filter = rent.user_filters.get(user_id)
            print(f"user_filter –¥–ª—è {user_id}: {user_filter}")
            if not user_filter:
                continue
            district = user_filter.get("district", "")
            budget_str = user_filter.get("budget", "")
            try:
                budget_val = int("".join(filter(str.isdigit, budget_str))) * 1000
            except Exception:
                budget_val = 0

            print(f"–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º Avito: {district=}, {budget_val=}")
            flats = avito.search_avito_flats(district, budget_val)
            print(f"–ù–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {len(flats)}")
            if not flats:
                await bot.send_message(user_id, f"üîé –ü–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É: {district}, –¥–æ {budget_val} —Ä—É–±.")
            else:
                for obj in flats:
                    text = f"üè¢ {obj['title']}\n{obj['desc']}\n–¶–µ–Ω–∞: {obj['price']}‚ÇΩ\n{obj['link']}"
                    try:
                        await bot.send_message(user_id, text)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –∞–ª–µ—Ä—Ç–∞ {user_id}: {e}")

def register_handlers(dp):
    dp.include_router(router)

async def rent_alert_scheduler():
    while True:
        await asyncio.sleep(60 * 20)  # –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç (—Å—Ç–∞–≤—å —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ)
        await rent_alerts_main()      # –≤—ã–∑—ã–≤–∞–π —Ä–∞—Å—Å—ã–ª–∫—É

@router.message(Command("send_rent_alert"))
async def manual_alert(message: types.Message):
    await rent_alerts_main()
    await message.answer("–ê–ª–µ—Ä—Ç—ã –≤—Ä—É—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")